type: edu
custom_name: Can I have the Menu?
files:
- name: src/tictactoe/ApplicationRunner.java
  visible: true
  text: |
    package tictactoe;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new TicTacToe();
        }
    }
  learner_created: false
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |-
    package tictactoe;

    import javax.swing.*;

    public class TicTacToe extends JFrame {
        public TicTacToe() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JMenuItemFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import tictactoe.TicTacToe;

    import javax.swing.JButton;
    import java.text.MessageFormat;
    import java.text.StringCharacterIterator;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Stream;

    import static java.util.stream.IntStream.range;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class TicTacToeTest extends SwingTest {
        private static final String EMPTY_CELL = " ";
        private static final String MARK_X = "X";
        private static final String MARK_O = "O";
        private static final Map<String, String> GAME_STATE = Map.of(
                "--", "Game is not started",
                "H1", "The turn of Human Player (X)",
                "R1", "The turn of Robot Player (X)",
                "H2", "The turn of Human Player (O)",
                "R2", "The turn of Robot Player (O)",
                "HX", "The Human Player (X) wins",
                "RX", "The Robot Player (X) wins",
                "HO", "The Human Player (O) wins",
                "RO", "The Robot Player (O) wins",
                "DW", "Draw");

        public TicTacToeTest() {
            super(new TicTacToe());
        }

        @SwingComponent
        private JButtonFixture buttonA1;
        @SwingComponent
        private JButtonFixture buttonA2;
        @SwingComponent
        private JButtonFixture buttonA3;
        @SwingComponent
        private JButtonFixture buttonB1;
        @SwingComponent
        private JButtonFixture buttonB2;
        @SwingComponent
        private JButtonFixture buttonB3;
        @SwingComponent
        private JButtonFixture buttonC1;
        @SwingComponent
        private JButtonFixture buttonC2;
        @SwingComponent
        private JButtonFixture buttonC3;
        @SwingComponent
        private JButtonFixture buttonStartReset;
        @SwingComponent
        private JButtonFixture buttonPlayer1;
        @SwingComponent
        private JButtonFixture buttonPlayer2;
        @SwingComponent
        private JLabelFixture labelStatus;
        @SwingComponent
        private JMenuItemFixture menuGame;
        @SwingComponent
        private JMenuItemFixture menuHumanHuman;
        @SwingComponent
        private JMenuItemFixture menuHumanRobot;
        @SwingComponent
        private JMenuItemFixture menuRobotHuman;
        @SwingComponent
        private JMenuItemFixture menuRobotRobot;
        @SwingComponent
        private JMenuItemFixture menuExit;

        private Stream<JButtonFixture> cells() {
            return Stream.of(
                    buttonA3, buttonB3, buttonC3,
                    buttonA2, buttonB2, buttonC2,
                    buttonA1, buttonB1, buttonC1
            );
        }

        private Map<String, JButtonFixture> board;

        private final List<JButton> buttons = new ArrayList<>();

        @DynamicTest(feedback = "Cells should be visible")
        CheckResult test1() {
            cells().forEach(this::requireVisible);
            cells().map(JButtonFixture::target).forEach(buttons::add);
            board = Map.of(
                    "A3", buttonA3, "B3", buttonB3, "C3", buttonC3,
                    "A2", buttonA2, "B2", buttonB2, "C2", buttonC2,
                    "A1", buttonA1, "B1", buttonB1, "C1", buttonC1,
                    "SR", buttonStartReset);
            return correct();
        }

        @DynamicTest(feedback = "Cells should be disabled before the start of the game")
        CheckResult test2() {
            cells().forEach(this::requireDisabled);
            return correct();
        }

        @DynamicTest(feedback = "All cells should be empty before the game")
        CheckResult test3() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            return correct();
        }

        private int[] cols;
        private int[] rows;

        @DynamicTest(feedback = "The board should have exactly three rows and columns")
        CheckResult test4() {
            cols = buttons.stream().mapToInt(JButton::getX).distinct().sorted().toArray();
            rows = buttons.stream().mapToInt(JButton::getY).distinct().sorted().toArray();

            assertEquals(3, cols.length,
                    "The board should have exactly 3 columns. "
                            + "The column coordinates are {0}, "
                            + "the buttons have {1} different column coordinates",
                    Arrays.toString(cols), cols.length);

            assertEquals(3, rows.length,
                    "The board should have exactly 3 rows. "
                            + "The row coordinates are {0}, "
                            + "The buttons have {0} different row coordinates",
                    Arrays.toString(rows), rows.length);

            return correct();
        }

        private static final String[] ROW_NAME = new String[]{"top", "middle", "bottom"};
        private static final String[] COL_NAME = new String[]{"left", "middle", "right"};

        @DynamicTest(feedback = "The buttons are incorrectly placed on the board")
        CheckResult test5() {
            range(0, 9).forEach(index -> {

                assertEquals(rows[index / 3], buttons.get(index).getY(),
                        "The button {0} should be located in the {1} row",
                        buttons.get(index).getText(), ROW_NAME[index / 3]);

                assertEquals(cols[index % 3], buttons.get(index).getX(),
                        "The button {0} should be located in the {1} column",
                        buttons.get(index).getText(), COL_NAME[index % 3]);
            });

            return correct();
        }

        @DynamicTest(feedback = "Add a JLabel with the name of 'LabelStatus' as status bar")
        CheckResult test6() {
            labelStatus.requireVisible();
            return correct();
        }

        @DynamicTest(feedback = "The status bar should contain the following text: 'Game is not started' before the game")
        CheckResult test7() {
            labelStatus.requireText(GAME_STATE.get("--"));
            return correct();
        }

        @DynamicTest(feedback = "Add a JButton with the name of 'ButtonStartReset' and enable it")
        CheckResult test8() {
            buttonStartReset.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The 'ButtonStartReset' component should have the following text: 'Start' after the program starts")
        CheckResult test9() {
            buttonStartReset.requireText("Start");
            return correct();
        }

        @DynamicTest(feedback = "Once the game is started, change the 'Start' button to 'Reset'")
        CheckResult test10() {
            buttonStartReset.click();
            buttonStartReset.requireText("Reset");
            return correct();
        }

        @DynamicTest(feedback = "Cells should be enabled after the game is started")
        CheckResult test12() {
            cells().forEach(this::requireEnabled);
            return correct();
        }

        @DynamicTest(feedback = "Once the game is started, the status should indicate the first player turn")
        CheckResult test13() {
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "Disable player buttons once the game has started." +
                " Expected text: 'The turn of Human Player (X)'")
        CheckResult test14() {
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            return correct();
        }

        @DynamicTest(feedback = "Display 'X' after the first move" +
                " and the status should indicate the turn of the second player")
        CheckResult test15() {
            buttonA1.click();
            buttonA1.requireText(MARK_X);
            labelStatus.requireText(GAME_STATE.get("H2"));
            return correct();
        }

        @DynamicTest(feedback = "Display 'O' after the second move" +
                " and the status should indicate the turn of the first player")
        CheckResult test16() {
            buttonA3.click();
            buttonA3.requireText(MARK_O);
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "The Reset button should finish the game " +
                "enable player buttons")
        CheckResult test17() {
            buttonStartReset.click();
            buttonPlayer1.requireEnabled();
            buttonPlayer2.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The Reset button should clear the board" +
                " and the status should indicate 'Game is not started'")
        CheckResult test19() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            labelStatus.requireText(GAME_STATE.get("--"));
            return correct();
        }

        private final String[][] humanVsHuman = new String[][]{
                {"SR", "_________", "H1"},
                {"A1", "______X__", "H2"}, {"B1", "______XO_", "H1"},
                {"C3", "__X___XO_", "H2"}, {"B3", "_OX___XO_", "H1"},
                {"B2", "_OX_X_XO_", "HX"}, {"SR", "_________", "--"},

                {"SR", "_________", "H1"},
                {"B2", "____X____", "H2"}, {"A1", "____X_O__", "H1"},
                {"C1", "____X_O_X", "H2"}, {"A3", "O___X_O_X", "H1"},
                {"A2", "O__XX_O_X", "H2"}, {"C2", "O__XXOO_X", "H1"},
                {"B3", "OX_XXOO_X", "H2"}, {"B1", "OX_XXOOOX", "H1"},
                {"C3", "OXXXXOOOX", "DW"}, {"B2", "OXXXXOOOX", "DW"},
                {"B2", "OXXXXOOOX", "DW"}, {"SR", "_________", "--"},

                {"SR", "_________", "H1"},
                {"A2", "___X_____", "H2"}, {"B2", "___XO____", "H1"},
                {"A1", "___XO_X__", "H2"}, {"A3", "O__XO_X__", "H1"},
                {"C1", "O__XO_X_X", "H2"}, {"B1", "O__XO_XOX", "H1"},
                {"C2", "O__XOXXOX", "H2"}, {"B3", "OO_XOXXOX", "HO"},
                {"A3", "OO_XOXXOX", "HO"}, {"C3", "OO_XOXXOX", "HO"},
                {"C3", "OO_XOXXOX", "HO"}, {"B2", "OO_XOXXOX", "HO"},
                {"SR", "_________", "--"}, {"SR", "_________", "H1"},
                {"SR", "_________", "--"}, {"SR", "_________", "H1"},

                {"C1", "________X", "H2"}, {"B1", "_______OX", "H1"},
                {"B2", "____X__OX", "H2"}, {"C2", "____XO_OX", "H1"},
                {"A3", "X___XO_OX", "HX"}, {"B3", "X___XO_OX", "HX"},
                {"C3", "X___XO_OX", "HX"}, {"A1", "X___XO_OX", "HX"},
                {"A1", "X___XO_OX", "HX"}, {"SR", "_________", "--"},

                // Test for double click on the same cells
                {"SR", "_________", "H1"},
                {"B2", "____X____", "H2"}, {"B2", "____X____", "H2"},
                {"B2", "____X____", "H2"}, {"C1", "____X___O", "H1"},
                {"C1", "____X___O", "H1"}, {"C1", "____X___O", "H1"},
                {"SR", "_________", "--"},

        };

        @DynamicTest(data = "humanVsHuman", feedback = "Incorrect game state")
        CheckResult test20(final String cell, final String position, final String state) {
            board.get(cell).click();
            labelStatus.requireText(GAME_STATE.get(state));
            final var iter = new StringCharacterIterator(" " + position.replace('_', ' '));
            cells().forEach(c -> c.requireText(String.valueOf(iter.next())));
            return correct();
        }


        @DynamicTest(feedback = "The player buttons should be Human vs Human")
        CheckResult test30() {
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Human");
            return correct();
        }

        @DynamicTest(feedback = "The player buttons should switch Human/Robot")
        CheckResult test40() {
            buttonPlayer1.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer1.click();
            buttonPlayer1.requireText("Human");

            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Human");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Human vs Human', the game should start. " +
                "Both buttons should be set to 'Human' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled. " +
                "The status should indicate the first human player turn.")
        CheckResult test50() {
            menuHumanHuman.requireEnabled();
            menuHumanHuman.requireVisible();
            menuHumanHuman.click();
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Human");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            cells().forEach(this::requireEnabled);
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Human vs Robot', the game should start. " +
                "The first player button should be set to 'Human' and disabled. " +
                "The second player button should be set to 'Robot' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled. " +
                "The status should indicate the first human player turn.")
        CheckResult test60() {
            menuHumanRobot.requireEnabled();
            menuHumanRobot.requireVisible();
            menuHumanRobot.click();
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Robot");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            cells().forEach(this::requireEnabled);
            labelStatus.requireText(GAME_STATE.get("H1"));
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Human vs Robot', the game should start. " +
                "The first player button should be set to 'Robot' and disabled. " +
                "The second player button should be set to 'Human' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled.")
        CheckResult test70() {
            menuRobotHuman.requireEnabled();
            menuRobotHuman.requireVisible();
            menuRobotHuman.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer2.requireText("Human");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            cells().forEach(this::requireEnabled);
            return correct();
        }

        @DynamicTest(feedback = "After selecting 'Robot vs Robot', the game should start. " +
                "Both player's buttons should be set to 'Robot' and disabled. " +
                "The Start/Reset button should be set to 'Reset' and the cells should be enabled.")
        CheckResult test80() {
            menuRobotRobot.requireEnabled();
            menuRobotRobot.requireVisible();
            menuRobotRobot.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer2.requireText("Robot");
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            buttonStartReset.requireText("Reset");
            return correct();
        }

        private static void assertEquals(
                final Object expected,
                final Object actual,
                final String error,
                final Object... args) {

            if (!expected.equals(actual)) {
                final var feedback = MessageFormat.format(error, args);
                throw new WrongAnswer(feedback);
            }
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;

    public class Board extends JPanel {

        public Board() {
            this.setLayout(new GridLayout(3,3));




        }
    }
  learner_created: true
- name: src/tictactoe/class_rozgrywka.java
  visible: true
  text: |-
    package tictactoe;


    import java.util.Random;

    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
    public class class_rozgrywka
    {
        int[][] tablica = new int[10][3];
        int[][] wygrane = new int[10][4];

        int licznik;
        int wybor;
        int wybor_p;
        public int wynik;
        int ktory_wynik;

        int[] losowanie_tablica = new int[10];
        int[] losowanie_tablica1 = new int[10];
        int[] losowanie_tablica2 = new int[10];
        //______________________________________________________________________________________________
        public class_rozgrywka()
        {
            for (int i = 0; i <= 8; i++) {
                for (int j = 0; j <= 3; j++)
                    wygrane[i][j] = 0;
            }
            wygrane[1][1] = 1;
            wygrane[1][2] = 2;
            wygrane[1][3] = 3;

            wygrane[2][1] = 1;
            wygrane[2][2] = 4;
            wygrane[2][3] = 7;

            wygrane[3][1] = 2;
            wygrane[3][2] = 5;
            wygrane[3][3] = 8;

            wygrane[4][1] = 3;
            wygrane[4][2] = 6;
            wygrane[4][3] = 9;

            wygrane[5][1] = 4;
            wygrane[5][2] = 5;
            wygrane[5][3] = 6;

            wygrane[6][1] = 7;
            wygrane[6][2] = 8;
            wygrane[6][3] = 9;

            wygrane[7][1] = 1;
            wygrane[7][2] = 5;
            wygrane[7][3] = 9;

            wygrane[8][1] = 3;
            wygrane[8][2] = 5;
            wygrane[8][3] = 7;
        }
        //______________________________________________________________________________________________
        public int podaj_nr(int a, int b)
        { return wygrane[a][b];
        }
        //______________________________________________________________________________________________
        public void kasowanie()
        {   licznik = 0;
            wynik = 0;
            for(int i = 1;i<=9;i++){
                for(int j = 1;j<=2;j++){
                    tablica[i][j] = 0;
                }
            }
        }
        //______________________________________________________________________________________________
        public void wstaw(int a, int b, int c)
        {  tablica[a][b]=c;
            if (b==1){licznik = licznik + 1;}
        }
        //______________________________________________________________________________________________
        public String wynik_slownie()
        {
            String temp;
            switch (wynik) {
                case 0:
                    temp = "remis";
                    return temp;
                //break;
                case 1:
                    temp = "wygrana X";
                    return temp;
                // break;
                case 2:
                    temp = "porazka X";
                    return temp;
                // break;

                default:
                    throw new IllegalStateException("Unexpected value: " + wynik);
            }
        }
        //______________________________________________________________________________________________
        public void przelicz_wynik(){
            if (wybor == 1) { wybor_p = 2; }
            else    { wybor_p = 1; }

            for(int i = 1;i<=8;i++){
                if ((wybor == tablica [(wygrane[i][1])][2]) && (wybor == tablica [(wygrane[i][2])][2]) && (wybor == tablica [(wygrane[i][3])][2])  )
                {
                    wynik = 1;
                    ktory_wynik = i ;
                }
            }

            for(int i = 1;i<=8;i++){
                if ((wybor_p == tablica [(wygrane[i][1])][2]) && (wybor_p == tablica [(wygrane[i][2])][2]) && (wybor_p == tablica [(wygrane[i][3])][2])  )
                {
                    wynik = 2;
                    ktory_wynik = i ;
                }
            }
        }
        //______________________________________________________________________________________________
        public int losowanie_old() {

            int j;
            int losowanie2=0;

            for (int i = 1; i <= 9; i++) {
                losowanie_tablica[i] = 0;
            }

            j = 0;
            for (int i = 1; i <= 9; i++) {
                if(tablica[i][2] == 0){
                    losowanie_tablica[j + 1] = i;
                    j = j+ 1;
                }
            }

            if (j > 0){

                j = j + 1;
                int Low ;
                int High ;

                int los;
                Low = 1;
                High = j - 1;
                Random r = new Random();
                los = (int)((High - Low + 1) * r.nextDouble() + Low);
                losowanie2 = losowanie_tablica[los];
                tablica[losowanie2][ 1] = 1;
                if (wybor == 1) {   wybor_p = 2;   }
                else { wybor_p = 1;     }
                tablica[losowanie2][ 2] = wybor_p;
            }
            else{  przelicz_wynik();   }
            return losowanie2;
        }
        //______________________________________________________________________________________________
        public int losowanie() {

            int losowanie2=0;
            //'---------------------------------------------
            // ' kasowanie tablic
            for (int i = 1; i <= 9; i++) {
                losowanie_tablica[i] = 0;// ' tablica wolnych
                losowanie_tablica1[i] = 0 ;//' tablica zajętych czlowiek
                losowanie_tablica2[i] = 0 ;//' tablica zajętych 2
            }
            //'---------------------------------------------
            //'tworzenie tablicy wolnych
            int j;
            j = 0 ;//' tyle wolnych
            for (int i = 1; i <= 9; i++) {
                if (tablica [i][ 1] ==0) {
                    losowanie_tablica[j + 1] = i;
                    j = j + 1;
                }
            }
            //'j = j - 1
            //'---------------------------------------------
            //'tworzenie tablicy zajetych przez czlowieka
            if (wybor == 1) {      wybor_p = 2;}
            else         { wybor_p = 1;}

            int k;
            k = 1 ;//'tyle zajetych przez czlowieka
            for (int i = 1; i <= 9; i++) {
                if (tablica [i][ 2] ==wybor) {
                    losowanie_tablica1[k] = i;
                    k = k + 1;
                }
            }
            k = k - 1;
            //'---------------------------------------------
            //' ktora najblizsza wygrana czlowieka
            int wsk1;
            int wsk2;
            int pamiec;
            wsk1 = 0;
            wsk2 = 0;
            pamiec = 0;
            int puste;

            for (int a = 1; a <= 8; a++) {
                wsk1 = 0;

                for (int c = 1; c <= 3; c++) {

                    for (int b = 1; b <= k; b++) {
                        puste = 0;
                        for (int aa = 1; aa <= 3; aa++) {

                            if (tablica [wygrane[a][ aa]][ 2] ==0) {  puste = 1;    }
                        }
                        if (wygrane [a][ c] == losowanie_tablica1[b] && puste == 1){     wsk1 = wsk1 + 1;    }

                        if (wsk1 >=wsk2) {
                            wsk2 = wsk1;
                            pamiec = a;
                        }
                    }
                }
            }
            //'---------------------------------------------
            if (j > 0) {
                int kk;
                kk = 1;

                for (int xx = 1; xx <= 3; xx++) {
                    for (int zz = 1;zz <= j; zz++) {

                        if (wygrane [pamiec][ xx] ==losowanie_tablica[zz]) {
                            losowanie_tablica2[kk] = losowanie_tablica[zz];
                            kk = kk + 1;
                        }

                    }
                }


                if (kk > 1) {

                    double Low;
                    double High;
                    Low = 1;
                    High = kk - 1;

                    int los;

                    Random r = new Random();
                    los = (int) ((High - Low + 1) * r.nextDouble() + Low);
                    losowanie2 = losowanie_tablica2[los];
                    tablica[losowanie2][1] = 1;
                    if (wybor == 1) {
                        wybor_p = 2;
                    }
                    else {
                        wybor_p = 1;
                    }
                    tablica[losowanie2][ 2] = wybor_p;
                }
                else{
                    losowanie_old();
                }








            }
            else{

                przelicz_wynik();
            }



            return losowanie2;
            //'---------------------------------------------
        }
        //______________________________________________________________________________________________

        //______________________________________________________________________________________________

        //______________________________________________________________________________________________

        //______________________________________________________________________________________________

    }
    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  learner_created: true
- name: src/tictactoe/Class_przycisk.java
  visible: true
  text: |-
    package tictactoe;


    public class Class_przycisk {

        int numer;
        private String[] wartosc;

        public Class_przycisk(){
            wartosc = new String[1];
        }

        public void kasowanie(){
            numer=0;
            wartosc[0]= String.valueOf(0);

        }
        public void przypisanie(int a){
            numer=a;
        }
        public void przypisz( String a){
            wartosc[0]=a;
        }

    }
  learner_created: true
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;

    import java.util.*;

    public class Game {

        List<Integer> listFree;
        List<Integer> listOccupied;
        List<Integer> listOccupied_X;
        List<Integer> listOccupied_O;
        boolean endGame;
        boolean x_wins;
        boolean o_wins;
        String currentLetter;
        String currentStatus;

        List<List<Integer>> listSolutions;

        String[] literki = new String[10];

        int counter = 0;


        //----------------------------------------------------------------------
        public Game() {
            listFree=new ArrayList<>(Arrays.asList(1, 2, 3,4,5,6,7,8,9));
            listOccupied=new ArrayList<>();
            listOccupied_X=new ArrayList<>();
            listOccupied_O=new ArrayList<>();
            listSolutions = new ArrayList<>();
            endGame=false;
            x_wins=false;
            o_wins=false;
            currentLetter="X";
            currentStatus ="Game is not started";
            for(int i = 0;i<10;i++)
                literki[i]=" ";

            listSolutions.add(new ArrayList<>(Arrays.asList(1,2,3)));
            listSolutions.add(new ArrayList<>(Arrays.asList(1,4,7)));
            listSolutions.add(new ArrayList<>(Arrays.asList(2,5,8)));
            listSolutions.add(new ArrayList<>(Arrays.asList(3,6,9)));
            listSolutions.add(new ArrayList<>(Arrays.asList(4,5,6)));
            listSolutions.add(new ArrayList<>(Arrays.asList(7,8,9)));
            listSolutions.add(new ArrayList<>(Arrays.asList(1,5,9)));
            listSolutions.add(new ArrayList<>(Arrays.asList(3,5,7)));

            //listSolutions={(1,2,3),(1,4,7),(2,5,8),(3,6,9),(4,5,6),(7,8,9),(1,5,9),(3,5,7)};
        }
        //----------------------------------------------------------------------
        public void wstaw(String znak, int numer){
            if (!listFree.isEmpty()){


                listFree.remove(listFree.indexOf(numer));
                listOccupied.add(numer);
                currentStatus="Game in progress";
                literki[numer]=currentLetter;
                counter++;

                switch (znak){
                    case "X":
                            listOccupied_X.add(numer);
                            currentLetter="O";

                        break;
                    case   "O":
                        listOccupied_O.add(numer);
                        currentLetter="X";
                        break;
                }

            if(listFree.isEmpty()){
                endGame=true;
                if(!x_wins&&!o_wins&&endGame)
                    currentStatus = "Draw";
            }

            }

       }
        //----------------------------------------------------------------------
        public int losuj(String znak){

            int randomElement=0;
            if (!listFree.isEmpty()){
                Random rand = new Random();
                randomElement = listFree.get(rand.nextInt(listFree.size()));
            }
            return randomElement;
        }

        //----------------------------------------------------------------------
        public boolean checkStatusGry(){

                for (List<Integer> listSolution : listSolutions) {
                    boolean x = listOccupied_X.containsAll(listSolution);
                    boolean o = listOccupied_O.containsAll(listSolution);

                        if(x){
                            endGame=true;
                            x_wins=true;
                            o_wins=false;
                            currentStatus="X wins";
                            return endGame;
                        }
                        if (o){
                            endGame=true;
                            x_wins=false;
                            o_wins=true;
                            currentStatus="O wins";
                            return endGame;
                        }
                }


            if(!x_wins&&!o_wins&&endGame)
                currentStatus = "Draw";

            return endGame;
        }
        //----------------------------------------------------------------------


    }
  learner_created: true
- name: src/tictactoe/Status.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;

    public class Status extends JPanel {
        public Status() {
            this.setLayout(new GridLayout(1,2));

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12897#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 21 Oct 2022 14:30:36 UTC
record: -1
